module main
author unknown
version 1 0 
description ''
variables '音量阈值' '音量样本集' 

  spec ' ' '实时采集音量样本' '实时采集音量样本'
  spec 'r' '当前音量' '当前音量'
  spec ' ' '打开麦克风' '打开麦克风'
  spec 'r' '拍手次数' '拍手次数'
  spec ' ' '显示数字' '显示数字 _' 'auto' 0
  spec 'r' '测量环境音量' '测量环境音量'
  spec ' ' '设置拍手音量阈值' '设置拍手音量阈值 _' 'auto' 200

to '实时采集音量样本' {
  '打开麦克风'
  waitMillis 500
  forever {
    for i (size 音量样本集) {
      atPut i 音量样本集 ('[sensors:microphone]')
    }
    waitMicros 50
  }
}

to '当前音量' {
  if (音量样本集 == 0) {
    音量样本集 = (newList 50)
    comment '不能把广播改为调用，否则陷入无穷循环...'
    sendBroadcast '实时采集音量样本'
  }
  local 'high' -10000
  local 'low' 10000
  for s 音量样本集 {
    high = (maximum high s)
    low = (minimum low s)
  }
  return (high - low)
}

to '打开麦克风' {
  if ((boardType) == 'micro:bit v2') {
    digitalWriteOp 28 true
    waitMillis 500
  }
}

to '拍手次数' {
  comment '若音量阈值为0，则设为默认值'
  if (音量阈值 == 0) {
    音量阈值 = 150
  }
  comment '检测第一次拍手'
  waitUntil (('当前音量') > 音量阈值)
  local 'count' 1
  comment '累计拍手次数'
  forever {
    comment '若上次拍手后700ms没有检测到新一次拍手，结束流程并返回拍手次数'
    waitUntil (('当前音量') < ((3 * 音量阈值) / 4))
    resetTimer
    repeatUntil (('当前音量') > 音量阈值) {
      if ((timer) > 700) {
        comment '返回积木将结束流程。'
        return count
      }
    }
    count += 1
  }
}

to '显示数字' n {
  displayCharacter ('[data:unicodeString]' (48 + n))
}

to '测量环境音量' {
  local 'volume' 0
  resetTimer
  repeatUntil ((timer) > 3000) {
    volume = (maximum volume ('当前音量'))
  }
  return ((13 * volume) / 10)
}

to '设置拍手音量阈值' v {
  音量阈值 = v
}

script 713 40 ('当前音量')

script 492 51 {
to '当前音量' {}
}

script 52 54 {
to '拍手次数' {}
}

script 297 66 ('拍手次数')

script 469 482 {
to '打开麦克风' {}
}

script 88 662 {
to '实时采集音量样本' {}
}

script 649 893 {
whenStarted
'打开麦克风'
'设置拍手音量阈值' 250
waitMillis 500
forever {
  '显示数字' ('拍手次数')
  waitMillis 1000
  '[display:mbDisplayOff]'
}
}

script 46 911 {
to '设置拍手音量阈值' {}
}

script 44 1027 {
to '测量环境音量' {}
}

script 338 1042 ('测量环境音量')

script 77 1273 {
to '显示数字' {}
}

script 271 1285 {
'显示数字' 9
}


module 'LED Display' Output
author MicroBlocks
version 1 5 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' '_set display color' 'set display color _' 'color'
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'

to '_set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module Microphone Input
author MicroBlocks
version 1 3 
description 'Microphone, loudness, and clap counting support for boards with built in microphones. The microphone block usually reports values between -512 and 511, with zero for silence. However, very loud sounds may exceed that range on some boards. On the micro:bit v2, the microphone must be turned on before use.'
variables _clapThreshold _loudnessSamples 

  spec 'r' '[sensors:microphone]' 'microphone'
  spec ' ' 'turnOnMicrophone' 'turn on microphone'
  spec 'r' 'loudness' 'loudness'
  spec 'r' 'clapCount' 'clap count'
  spec ' ' 'setClapThreshold' 'set clap threshold _' 'auto' 200
  spec 'r' 'guessClapThreshold' 'estimate clap threshold'
  spec ' ' '_loudnessLoop' '_loudnessLoop'

to '_loudnessLoop' {
  comment 'Sample microphone at ~2000 samples/sec, keeping the most recent N samples.'
  turnOnMicrophone
  waitMillis 20
  forever {
    for i (size _loudnessSamples) {
      atPut i _loudnessSamples ('[sensors:microphone]')
      waitMicros 500
    }
  }
}

to clapCount {
  comment 'Count the number of claps in a sequence.'
  if (_clapThreshold == 0) {
    _clapThreshold = 150
  }
  waitUntil ((loudness) > _clapThreshold)
  local 'count' 1
  forever {
    waitUntil ((loudness) < ((3 * _clapThreshold) / 4))
    resetTimer
    repeatUntil ((loudness) > _clapThreshold) {
      comment 'This loop awaits either the next clap or for a pause, indicating that the claps have ended.'
      if ((timer) > 700) {
        comment 'No clap for a while, return the count.'
        return count
      }
    }
    count += 1
  }
}

to guessClapThreshold {
  comment 'Sample the loudness for three seconds and set
_clapThreshold to 130% of the maxium.'
  local 'maxLoudness' 0
  resetTimer
  repeatUntil ((timer) > 3000) {
    maxLoudness = (maximum maxLoudness (loudness))
  }
  return ((13 * maxLoudness) / 10)
}

to loudness {
  if (_loudnessSamples == 0) {
    comment 'Initialize _loudnessSamples and start sampling.'
    _loudnessSamples = (newList 50)
    sendBroadcast '_loudnessLoop'
  }
  local 'low' 10000
  local 'high' -10000
  for n _loudnessSamples {
    low = (minimum low n)
    high = (maximum high n)
  }
  return (high - low)
}

to setClapThreshold n {
  _clapThreshold = n
}

to turnOnMicrophone {
  if ('micro:bit v2' == (boardType)) {
    comment 'Turn on the microphone and
wait for it to settle down.'
    digitalWriteOp 28 true
    waitMillis 50
  }
}

